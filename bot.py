import re
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.utils.exceptions import TelegramAPIError

from database import Database
from config import BOT_TOKEN, DB_FILE, ADMIN_IDS, TIKTOK_URL_REGEX

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# Initialize database
db = Database(DB_FILE)

# Define states for conversation
class BotStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_like_confirmation = State()
    waiting_for_admin_action = State()
    waiting_for_admin_user_id = State()
    waiting_for_admin_points = State()
    waiting_for_admin_level = State()


# Helper functions
def is_valid_tiktok_url(url):
    """Check if the URL is a valid TikTok URL"""
    return bool(re.match(TIKTOK_URL_REGEX, url))


def get_user_mention(user):
    """Get a mention for a user"""
    if user.username:
        return f"@{user.username}"
    else:
        return f"[{user.first_name}](tg://user?id={user.id})"


async def check_spam(message: types.Message, command: str):
    """Check if a user is spamming commands"""
    user_id = message.from_user.id
    
    # Admins bypass spam protection
    if user_id in ADMIN_IDS or db.is_admin(user_id):
        return False
    
    if not db.can_execute_command(user_id, command):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.")
        return True
    
    db.record_command(user_id, command)
    return False


# Command handlers
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """Handle /start command"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
    if await check_spam(message, 'start'):
        return
    
    user = message.from_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    db.update_user_last_action(user.id)
    
    # Set admin status if user ID is in ADMIN_IDS
    if user.id in ADMIN_IDS and not db.is_admin(user.id):
        db.set_admin_status(user.id, True)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {get_user_mention(user)}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é TikTok-–≤–∏–¥–µ–æ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        f"üìå /submit [—Å—Å—ã–ª–∫–∞] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å\n"
        f"üëç /like [–Ω–æ–º–µ—Ä] - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –ª–∞–π–∫–Ω—É–ª–∏ –≤–∏–¥–µ–æ\n"
        f"üìã /queue - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ\n"
        f"üìä /status - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –≤–∏–¥–µ–æ, –≤–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ª–∞–π–∫–Ω—É—Ç—å {db.get_likes_required()} –≤–∏–¥–µ–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏."
    )
    
    await message.reply(welcome_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=['submit'])
async def cmd_submit(message: types.Message):
    """Handle /submit command"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /submit –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if await check_spam(message, 'submit'):
        return
    
    user_id = message.from_user.id
    db.update_user_last_action(user_id)
    
    # Check if user can submit a video
    if not db.can_submit_video(user_id):
        likes_given = db.get_user(user_id)['likes_given']
        likes_required = db.get_likes_required()
        likes_needed = likes_required - likes_given
        
        await message.reply(
            f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –ø–æ–∫–∞ –Ω–µ –ª–∞–π–∫–Ω–µ—Ç–µ –µ—â–µ {likes_needed} –≤–∏–¥–µ–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /queue –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –∏ /like [–Ω–æ–º–µ—Ä] –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∞–π–∫–∞."
        )
        return
    
    # Check if URL was provided with command
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) > 1:
        url = command_parts[1].strip()
        if is_valid_tiktok_url(url):
            video_id = db.add_video(user_id, url)
            leveled_up = db.increment_user_submissions(user_id)
            
            response = f"‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {video_id}!\n" \
                      f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /queue –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏."
            
            if leveled_up:
                user_data = db.get_user(user_id)
                response += f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {user_data['level']}!"
                
                # Add bonus for level up
                if user_data['level'] > 1:
                    bonus_points = user_data['level'] * 10
                    conn = db.connect()
                    cursor = conn.cursor()
                    cursor.execute(
                        "UPDATE users SET points = points + ? WHERE user_id = ?",
                        (bonus_points, user_id)
                    )
                    conn.commit()
                    conn.close()
                    
                    response += f"\nüí∞ –ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: +{bonus_points} –æ—á–∫–æ–≤!"
            
            await message.reply(response)
        else:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ TikTok. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ."
            )
    else:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /submit https://www.tiktok.com/@username/video/1234567890"
        )


@dp.message_handler(commands=['like'])
async def cmd_like(message: types.Message):
    """Handle /like command"""
    if await check_spam(message, 'like'):
        return
    
    user_id = message.from_user.id
    db.update_user_last_action(user_id)
    
    # Check if video ID was provided with command
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) > 1:
        try:
            video_id = int(command_parts[1].strip())
            video = db.get_video(video_id)
            
            if not video:
                await message.reply(f"‚ùå –í–∏–¥–µ–æ —Å –Ω–æ–º–µ—Ä–æ–º {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥–∏.")
                return
            
            # Check if user is trying to like their own video
            if video['user_id'] == user_id:
                await message.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ.")
                return
            
            # Check if user has already liked this video
            if db.has_liked_video(user_id, video_id):
                await message.reply(f"‚ùå –í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ –≤–∏–¥–µ–æ #{video_id}.")
                return
            
            # Add like and update user stats
            db.add_like(user_id, video_id)
            leveled_up = db.increment_user_likes(user_id)
            
            response = f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ª–∞–π–∫ –¥–ª—è –≤–∏–¥–µ–æ #{video_id}."
            
            if leveled_up:
                user_data = db.get_user(user_id)
                response += f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {user_data['level']}!"
                
                # Add bonus for level up
                if user_data['level'] > 1:
                    bonus_points = user_data['level'] * 10
                    conn = db.connect()
                    cursor = conn.cursor()
                    cursor.execute(
                        "UPDATE users SET points = points + ? WHERE user_id = ?",
                        (bonus_points, user_id)
                    )
                    conn.commit()
                    conn.close()
                    
                    response += f"\nüí∞ –ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: +{bonus_points} –æ—á–∫–æ–≤!"
            
            # Check if this is a streak (multiple likes in a row)
            conn = db.connect()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT COUNT(*) as streak 
                FROM likes 
                WHERE user_id = ? 
                AND like_time > datetime('now', '-1 day')
            """, (user_id,))
            streak = cursor.fetchone()['streak']
            
            if streak > 0 and streak % 5 == 0:  # Bonus every 5 likes in a day
                streak_bonus = streak // 5 * 15
                cursor.execute(
                    "UPDATE users SET points = points + ? WHERE user_id = ?",
                    (streak_bonus, user_id)
                )
                conn.commit()
                response += f"\nüî• –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –ª–∞–π–∫–æ–≤: +{streak_bonus} –æ—á–∫–æ–≤!"
            
            conn.close()
            
            await message.reply(response)
            
        except ValueError:
            await message.reply(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ.\n"
                "–ü—Ä–∏–º–µ—Ä: /like 42"
            )
    else:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /like 42\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /queue –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ."
        )


@dp.message_handler(commands=['queue'])
async def cmd_queue(message: types.Message):
    """Handle /queue command"""
    if await check_spam(message, 'queue'):
        return
    
    user_id = message.from_user.id
    db.update_user_last_action(user_id)
    
    # Get current queue
    queue = db.get_queue(limit=10)
    
    if not queue:
        await message.reply("üìã –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏—Ç –≤–∏–¥–µ–æ!")
        return
    
    # Format queue message
    queue_text = "üìã –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ:\n\n"
    
    for i, video in enumerate(queue):
        username = video['username'] or f"{video['first_name']} {video['last_name']}".strip()
        liked = "‚úÖ" if db.has_liked_video(user_id, video['id']) else "üëç"
        queue_text += f"{i+1}. #{video['id']} –æ—Ç {username}: {video['tiktok_url']} [{liked} {video['likes_count']}]\n\n"
    
    queue_text += (
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /like [–Ω–æ–º–µ—Ä] –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∞–π–∫–∞.\n"
        f"–í–∞–º –Ω—É–∂–Ω–æ –ª–∞–π–∫–Ω—É—Ç—å {db.get_likes_required()} –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë."
    )
    
    # Add pagination if there are more videos
    conn = db.connect()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) as count FROM videos")
    total_videos = cursor.fetchone()['count']
    conn.close()
    
    if total_videos > 10:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data="queue_prev_0"),
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data="queue_next_10")
        )
        await message.reply(queue_text, reply_markup=keyboard)
    else:
        await message.reply(queue_text)


@dp.callback_query_handler(lambda c: c.data.startswith('queue_'))
async def process_queue_pagination(callback_query: types.CallbackQuery):
    """Handle queue pagination"""
    user_id = callback_query.from_user.id
    db.update_user_last_action(user_id)
    
    action, offset_str = callback_query.data.split('_')[1:]
    offset = int(offset_str)
    
    if action == 'prev':
        new_offset = max(0, offset - 10)
    else:  # next
        new_offset = offset
    
    # Get queue with offset
    queue = db.get_queue(limit=10, offset=new_offset)
    
    if not queue:
        await bot.answer_callback_query(callback_query.id, "–ù–µ—Ç –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥–∏.")
        return
    
    # Format queue message
    queue_text = f"üìã –û—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ (—Å {new_offset + 1}):\n\n"
    
    for i, video in enumerate(queue):
        username = video['username'] or f"{video['first_name']} {video['last_name']}".strip()
        liked = "‚úÖ" if db.has_liked_video(user_id, video['id']) else "üëç"
        queue_text += f"{new_offset + i + 1}. #{video['id']} –æ—Ç {username}: {video['tiktok_url']} [{liked} {video['likes_count']}]\n\n"
    
    queue_text += (
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /like [–Ω–æ–º–µ—Ä] –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∞–π–∫–∞.\n"
        f"–í–∞–º –Ω—É–∂–Ω–æ –ª–∞–π–∫–Ω—É—Ç—å {db.get_likes_required()} –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë."
    )
    
    # Add pagination buttons
    conn = db.connect()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) as count FROM videos")
    total_videos = cursor.fetchone()['count']
    conn.close()
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if new_offset > 0:
        prev_offset = max(0, new_offset - 10)
        keyboard.insert(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"queue_prev_{prev_offset}"))
    
    if new_offset + 10 < total_videos:
        next_offset = new_offset + 10
        keyboard.insert(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data=f"queue_next_{next_offset}"))
    
    await bot.edit_message_text(
        queue_text,
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=keyboard
    )
    
    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    """Handle /status command"""
    if await check_spam(message, 'status'):
        return
    
    user_id = message.from_user.id
    db.update_user_last_action(user_id)
    
    user_data = db.get_user(user_id)
    if not user_data:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    
    likes_required = db.get_likes_required()
    likes_given = user_data['likes_given']
    can_submit = likes_given >= likes_required
    
    level_threshold = int(db.get_setting('level_threshold'))
    points_to_next_level = (user_data['level'] * level_threshold) - user_data['points']
    if points_to_next_level < 0:
        points_to_next_level = 0
    
    # Get user rank
    conn = db.connect()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT COUNT(*) as rank 
        FROM users 
        WHERE points > (SELECT points FROM users WHERE user_id = ?)
    """, (user_id,))
    rank = cursor.fetchone()['rank'] + 1
    
    cursor.execute("SELECT COUNT(*) as count FROM users")
    total_users = cursor.fetchone()['count']
    
    # Get recent activity
    cursor.execute("""
        SELECT COUNT(*) as today_likes
        FROM likes
        WHERE user_id = ? AND like_time > datetime('now', '-1 day')
    """, (user_id,))
    today_likes = cursor.fetchone()['today_likes']
    
    cursor.execute("""
        SELECT COUNT(*) as today_videos
        FROM videos
        WHERE user_id = ? AND submission_time > datetime('now', '-1 day')
    """, (user_id,))
    today_videos = cursor.fetchone()['today_videos']
    
    conn.close()
    
    # Calculate activity score (0-100%)
    activity_score = min(100, (today_likes * 20) + (today_videos * 30))
    
    status_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_mention(message.from_user)}:\n\n"
        f"üëç –õ–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {likes_given}\n"
        f"üé¨ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {user_data['videos_submitted']}\n"
        f"‚≠ê –û—á–∫–æ–≤: {user_data['points']}\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user_data['level']}\n"
        f"üìà –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {points_to_next_level} –æ—á–∫–æ–≤\n"
        f"ü•á –í–∞—à —Ä–∞–Ω–≥: {rank} –∏–∑ {total_users}\n\n"
        f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞:\n"
        f"üëç –õ–∞–π–∫–æ–≤: {today_likes}\n"
        f"üé¨ –í–∏–¥–µ–æ: {today_videos}\n"
        f"üîã –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_score}%\n\n"
    )
    
    if can_submit:
        status_text += "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å!"
    else:
        status_text += f"‚ùó –í–∞–º –Ω—É–∂–Ω–æ –ª–∞–π–∫–Ω—É—Ç—å –µ—â—ë {likes_required - likes_given} –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë."
    
    # Add achievements
    achievements = []
    if likes_given >= 10:
        achievements.append("üåü –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∞–π–∫–µ—Ä")
    if likes_given >= 50:
        achievements.append("üåüüåü –°—É–ø–µ—Ä –ª–∞–π–∫–µ—Ä")
    if user_data['videos_submitted'] >= 5:
        achievements.append("üìπ –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä")
    if user_data['level'] >= 5:
        achievements.append("üëë –í–µ—Ç–µ—Ä–∞–Ω")
    if activity_score >= 80:
        achievements.append("üî• –ù–∞ –æ–≥–Ω–µ")
    
    if achievements:
        status_text += "\n\nüèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
    
    await message.reply(status_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=['leaderboard'])
async def cmd_leaderboard(message: types.Message):
    """Handle /leaderboard command"""
    if await check_spam(message, 'leaderboard'):
        return
    
    user_id = message.from_user.id
    db.update_user_last_action(user_id)
    
    conn = db.connect()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT user_id, username, first_name, last_name, points, level, likes_given, videos_submitted
        FROM users
        ORDER BY points DESC
        LIMIT 10
    """)
    
    top_users = cursor.fetchall()
    conn.close()
    
    if not top_users:
        await message.reply("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")
        return
    
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    
    for i, user in enumerate(top_users):
        username = user['username'] or f"{user['first_name']} {user['last_name']}".strip()
        medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else f"{i+1}."
        
        leaderboard_text += (
            f"{medal} {username}: {user['points']} –æ—á–∫–æ–≤ (—É—Ä–æ–≤–µ–Ω—å {user['level']})\n"
            f"   üëç {user['likes_given']} –ª–∞–π–∫–æ–≤ | üé¨ {user['videos_submitted']} –≤–∏–¥–µ–æ\n\n"
        )
    
    await message.reply(leaderboard_text)


# Admin commands
@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    """Handle /admin command - show admin panel"""
    user_id = message.from_user.id
    
    if not db.is_admin(user_id):
        return
    
    db.update_user_last_action(user_id)
    
    # Create inline keyboard for admin panel
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        InlineKeyboardButton("üé¨ –û—á–µ—Ä–µ–¥—å", callback_data="admin_queue"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    )
    
    await message.reply("üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)


# Admin callback handlers
@dp.callback_query_handler(lambda c: c.data.startswith('admin_'))
async def process_admin_callback(callback_query: types.CallbackQuery):
    """Process admin panel callbacks"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    db.update_user_last_action(user_id)
    
    action = callback_query.data.split('_')[1]
    
    if action == "users":
        # Show user management options
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin"),
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ª–∞–π–∫–∏", callback_data="admin_reset_likes"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏", callback_data="admin_add_points"),
            InlineKeyboardButton("üîº –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_set_level"),
            InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block_user"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        )
        
        await bot.edit_message_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )
        
    elif action == "queue":
        # Show queue management options
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="admin_delete_video"),
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="admin_clear_queue"),
            InlineKeyboardButton("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="admin_announcement"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        )
        
        await bot.edit_message_text(
            "üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é:",
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )
        
    elif action == "settings":
        # Show settings options
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üî¢ –õ–∞–π–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="admin_set_likes_required"),
            InlineKeyboardButton("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–ø–∞–º–∞", callback_data="admin_set_spam_timeout"),
            InlineKeyboardButton("‚≠ê –û—á–∫–∏ –∑–∞ –ª–∞–π–∫", callback_data="admin_set_points_per_like"),
            InlineKeyboardButton("üé¨ –û—á–∫–∏ –∑–∞ –≤–∏–¥–µ–æ", callback_data="admin_set_points_per_submission"),
            InlineKeyboardButton("üìà –ü–æ—Ä–æ–≥ —É—Ä–æ–≤–Ω—è", callback_data="admin_set_level_threshold"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        )
        
        await bot.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )
        
    elif action == "stats":
        # Show bot statistics
        conn = db.connect()
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) as count FROM users")
        users_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM videos")
        videos_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT COUNT(*) as count FROM likes")
        likes_count = cursor.fetchone()['count']
        
        cursor.execute("SELECT SUM(points) as total FROM users")
        total_points = cursor.fetchone()['total'] or 0
        
        cursor.execute("""
            SELECT COUNT(*) as count 
            FROM users 
            WHERE last_action > datetime('now', '-1 day')
        """)
        active_users = cursor.fetchone()['count']
        
        cursor.execute("""
            SELECT COUNT(*) as count 
            FROM videos 
            WHERE submission_time > datetime('now', '-1 day')
        """)
        new_videos = cursor.fetchone()['count']
        
        cursor.execute("""
            SELECT COUNT(*) as count 
            FROM likes 
            WHERE like_time > datetime('now', '-1 day')
        """)
        new_likes = cursor.fetchone()['count']
        
        conn.close()
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"üé¨ –í–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {videos_count}\n"
            f"üëç –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {likes_count}\n"
            f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}\n\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24 —á–∞—Å–∞:\n"
            f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            f"üé¨ –ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ: {new_videos}\n"
            f"üëç –ù–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤: {new_likes}\n\n"
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"- –õ–∞–π–∫–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {db.get_setting('likes_required')}\n"
            f"- –û—á–∫–æ–≤ –∑–∞ –ª–∞–π–∫: {db.get_setting('points_per_like')}\n"
            f"- –û—á–∫–æ–≤ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: {db.get_setting('points_per_submission')}\n"
            f"- –ü–æ—Ä–æ–≥ —É—Ä–æ–≤–Ω—è: {db.get_setting('level_threshold')}\n"
            f"- –¢–∞–π–º–∞—É—Ç —Å–ø–∞–º–∞: {db.get_setting('spam_timeout')} —Å–µ–∫."
        )
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        await bot.edit_message_text(
            stats_text,
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )
        
    elif action == "back":
        # Return to main admin panel
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton("üé¨ –û—á–µ—Ä–µ–¥—å", callback_data="admin_queue"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        )
        
        await bot.edit_message_text(
            "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )
    
    # Answer callback query to remove loading indicator
    await bot.answer_callback_query(callback_query.id)


# Admin action handlers
@dp.callback_query_handler(lambda c: c.data == "admin_delete_video")
async def admin_delete_video(callback_query: types.CallbackQuery):
    """Handle admin delete video action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏:"
    )
    await BotStates.waiting_for_admin_action.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="delete_video")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_clear_queue")
async def admin_clear_queue(callback_query: types.CallbackQuery):
    """Handle admin clear queue action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Create confirmation keyboard
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_confirm_clear"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    )
    
    await bot.edit_message_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=keyboard
    )
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_confirm_clear")
async def admin_confirm_clear_queue(callback_query: types.CallbackQuery):
    """Handle admin confirm clear queue action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Clear the queue
    conn = db.connect()
    cursor = conn.cursor()
    
    cursor.execute("DELETE FROM likes")
    cursor.execute("DELETE FROM videos")
    
    conn.commit()
    conn.close()
    
    await bot.answer_callback_query(callback_query.id, "–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
    
    # Return to main admin panel
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        InlineKeyboardButton("üé¨ –û—á–µ—Ä–µ–¥—å", callback_data="admin_queue"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    )
    
    await bot.edit_message_text(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data == "admin_add_admin")
async def admin_add_admin(callback_query: types.CallbackQuery):
    """Handle admin add admin action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:"
    )
    await BotStates.waiting_for_admin_user_id.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="add_admin")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_reset_likes")
async def admin_reset_likes(callback_query: types.CallbackQuery):
    """Handle admin reset likes action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤:"
    )
    await BotStates.waiting_for_admin_user_id.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="reset_likes")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_add_points")
async def admin_add_points(callback_query: types.CallbackQuery):
    """Handle admin add points action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏:"
    )
    await BotStates.waiting_for_admin_user_id.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="add_points")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_set_level")
async def admin_set_level(callback_query: types.CallbackQuery):
    """Handle admin set level action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å:"
    )
    await BotStates.waiting_for_admin_user_id.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="set_level")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_block_user")
async def admin_block_user(callback_query: types.CallbackQuery):
    """Handle admin block user action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:"
    )
    await BotStates.waiting_for_admin_user_id.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="block_user")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_announcement")
async def admin_announcement(callback_query: types.CallbackQuery):
    """Handle admin announcement action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    )
    await BotStates.waiting_for_admin_action.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="announcement")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_set_likes_required")
async def admin_set_likes_required(callback_query: types.CallbackQuery):
    """Handle admin set likes required action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:"
    )
    await BotStates.waiting_for_admin_action.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="set_likes_required")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_set_spam_timeout")
async def admin_set_spam_timeout(callback_query: types.CallbackQuery):
    """Handle admin set spam timeout action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:"
    )
    await BotStates.waiting_for_admin_action.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="set_spam_timeout")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_set_points_per_like")
async def admin_set_points_per_like(callback_query: types.CallbackQuery):
    """Handle admin set points per like action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –æ–¥–∏–Ω –ª–∞–π–∫:"
    )
    await BotStates.waiting_for_admin_action.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="set_points_per_like")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_set_points_per_submission")
async def admin_set_points_per_submission(callback_query: types.CallbackQuery):
    """Handle admin set points per submission action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –æ–¥–Ω—É –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤–∏–¥–µ–æ:"
    )
    await BotStates.waiting_for_admin_action.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="set_points_per_submission")
    
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "admin_set_level_threshold")
async def admin_set_level_threshold(callback_query: types.CallbackQuery):
    """Handle admin set level threshold action"""
    user_id = callback_query.from_user.id
    
    if not db.is_admin(user_id):
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:"
    )
    await BotStates.waiting_for_admin_action.set()
    
    # Store the action type in user data
    state = dp.current_state(user=user_id)
    await state.update_data(admin_action="set_level_threshold")
    
    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(state=BotStates.waiting_for_admin_user_id)
async def process_admin_user_id(message: types.Message, state: FSMContext):
    """Process admin user ID input"""
    admin_id = message.from_user.id
    
    if not db.is_admin(admin_id):
        await state.finish()
        return
    
    # Get the action type from user data
    user_data = await state.get_data()
    action = user_data.get('admin_action')
    
    try:
        target_user_id = int(message.text.strip())
        target_user = db.get_user(target_user_id)
        
        if not target_user:
            await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.finish()
            return
        
        if action == "add_admin":
            db.set_admin_status(target_user_id, True)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            await state.finish()
            
        elif action == "reset_likes":
            conn = db.connect()
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET likes_given = 0 WHERE user_id = ?", (target_user_id,))
            conn.commit()
            conn.close()
            await message.reply(f"‚úÖ –°—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id} —Å–±—Ä–æ—à–µ–Ω.")
            await state.finish()
            
        elif action == "add_points":
            await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}:")
            await BotStates.waiting_for_admin_points.set()
            await state.update_data(target_user_id=target_user_id)
            
        elif action == "set_level":
            await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}:")
            await BotStates.waiting_for_admin_level.set()
            await state.update_data(target_user_id=target_user_id)
            
        elif action == "block_user":
            # Create a spam protection record with a very long timeout
            conn = db.connect()
            cursor = conn.cursor()
            
            # Block for all common commands
            for cmd in ['start', 'submit', 'like', 'queue', 'status', 'leaderboard']:
                cursor.execute(
                    "INSERT OR REPLACE INTO spam_protection (user_id, command, timestamp) VALUES (?, ?, datetime('now', '+100 years'))",
                    (target_user_id, cmd)
                )
            
            conn.commit()
            conn.close()
            
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            await state.finish()
            
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
        await state.finish()


@dp.message_handler(state=BotStates.waiting_for_admin_points)
async def process_admin_points(message: types.Message, state: FSMContext):
    """Process admin points input"""
    admin_id = message.from_user.id
    
    if not db.is_admin(admin_id):
        await state.finish()
        return
    
    # Get the target user ID from user data
    user_data = await state.get_data()
    target_user_id = user_data.get('target_user_id')
    
    try:
        points = int(message.text.strip())
        
        conn = db.connect()
        cursor = conn.cursor()
        
        # Add points
        cursor.execute(
            "UPDATE users SET points = points + ? WHERE user_id = ?",
            (points, target_user_id)
        )
        
        # Check if user should level up
        cursor.execute("SELECT points, level FROM users WHERE user_id = ?", (target_user_id,))
        user = cursor.fetchone()
        
        cursor.execute("SELECT value FROM settings WHERE key = 'level_threshold'")
        level_threshold = int(cursor.fetchone()['value'])
        
        new_level = (user['points'] // level_threshold) + 1
        if new_level > user['level']:
            cursor.execute(
                "UPDATE users SET level = ? WHERE user_id = ?",
                (new_level, target_user_id)
            )
            
            await message.reply(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {points} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}.\n"
                f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—ã—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {new_level}!"
            )
        else:
            await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {points} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}.")
        
        conn.commit()
        conn.close()
        
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ (—á–∏—Å–ª–æ).")
    
    await state.finish()


@dp.message_handler(state=BotStates.waiting_for_admin_level)
async def process_admin_level(message: types.Message, state: FSMContext):
    """Process admin level input"""
    admin_id = message.from_user.id
    
    if not db.is_admin(admin_id):
        await state.finish()
        return
    
    # Get the target user ID from user data
    user_data = await state.get_data()
    target_user_id = user_data.get('target_user_id')
    
    try:
        level = int(message.text.strip())
        
        if level < 1:
            await message.reply("‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1.")
            await state.finish()
            return
        
        conn = db.connect()
        cursor = conn.cursor()
        
        # Set level
        cursor.execute(
            "UPDATE users SET level = ? WHERE user_id = ?",
            (level, target_user_id)
        )
        
        conn.commit()
        conn.close()
        
        await message.reply(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {level}.")
        
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (—á–∏—Å–ª–æ).")
    
    await state.finish()


@dp.message_handler(state=BotStates.waiting_for_admin_action)
async def process_admin_action(message: types.Message, state: FSMContext):
    """Process admin action input"""
    user_id = message.from_user.id
    
    if not db.is_admin(user_id):
        await state.finish()
        return
    
    # Get the action type from user data
    user_data = await state.get_data()
    action = user_data.get('admin_action')
    
    if action == "delete_video":
        try:
            video_id = int(message.text.strip())
            video = db.get_video(video_id)
            
            if not video:
                await message.reply(f"‚ùå –í–∏–¥–µ–æ —Å –Ω–æ–º–µ—Ä–æ–º {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥–∏.")
            else:
                db.delete_video(video_id)
                await message.reply(f"‚úÖ –í–∏–¥–µ–æ #{video_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        except ValueError:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ.")
    
    elif action == "set_likes_required":
        try:
            likes_required = int(message.text.strip())
            
            if likes_required < 0:
                await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            else:
                db.update_setting('likes_required', str(likes_required))
                await message.reply(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {likes_required}")
        except ValueError:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    elif action == "set_spam_timeout":
        try:
            spam_timeout = int(message.text.strip())
            
            if spam_timeout < 0:
                await message.reply("‚ùå –¢–∞–π–º–∞—É—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            else:
                db.update_setting('spam_timeout', str(spam_timeout))
                await message.reply(f"‚úÖ –¢–∞–π–º–∞—É—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {spam_timeout} —Å–µ–∫.")
        except ValueError:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    elif action == "set_points_per_like":
        try:
            points = int(message.text.strip())
            
            if points < 0:
                await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            else:
                db.update_setting('points_per_like', str(points))
                await message.reply(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –ª–∞–π–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {points}")
        except ValueError:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    elif action == "set_points_per_submission":
        try:
            points = int(message.text.strip())
            
            if points < 0:
                await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            else:
                db.update_setting('points_per_submission', str(points))
                await message.reply(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {points}")
        except ValueError:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    elif action == "set_level_threshold":
        try:
            threshold = int(message.text.strip())
            
            if threshold < 1:
                await message.reply("‚ùå –ü–æ—Ä–æ–≥ —É—Ä–æ–≤–Ω—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1.")
            else:
                db.update_setting('level_threshold', str(threshold))
                await message.reply(f"‚úÖ –ü–æ—Ä–æ–≥ —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold} –æ—á–∫–æ–≤")
        except ValueError:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    
    elif action == "announcement":
        announcement_text = message.text.strip()
        
        if not announcement_text:
            await message.reply("‚ùå –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        else:
            # Get all users
            conn = db.connect()
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()
            conn.close()
            
            sent_count = 0
            
            # Send announcement to all users
            for user in users:
                try:
                    await bot.send_message(
                        user['user_id'],
                        f"üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï\n\n{announcement_text}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    sent_count += 1
                except Exception as e:
                    logging.error(f"Failed to send announcement to user {user['user_id']}: {e}")
            
            await message.reply(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    
    # Clear state
    await state.finish()


# Error handler
@dp.errors_handler()
async def error_handler(update, exception):
    """Handle errors"""
    logging.exception(f"Error handling update {update}: {exception}")
    
    # Try to notify user about error
    if isinstance(update, types.Message):
        await update.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    return True


# Main function to start the bot
async def on_startup(dp):
    """Actions to perform on startup"""
    logging.info("Starting bot...")
    
    # Set default commands
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand("submit", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å"),
        types.BotCommand("like", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∞–π–∫ –≤–∏–¥–µ–æ"),
        types.BotCommand("queue", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ"),
        types.BotCommand("status", "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        types.BotCommand("leaderboard", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"),
        types.BotCommand("admin", "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
    ])


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
